import createjs from "masteryodaeaseljs";
import {N, startPos, delta} from "../Constant";
import {preloader} from "../index";

class GrassPainter
{
    /**
     * While constructing, get the preloaded assets,
     * then draw ground and walls by invoking init(map)
     * @param map generated by Controller.getMap()
     */
    constructor(stage)
    {
        this.square = preloader.getResult("square");
        this.wall = preloader.getResult("wall");
        this.coin = preloader.getResult("coin");
        this.stage = stage;
        this.reset()
    }
    
    reset()
    {
        this.container = null;
    }
    
    /**
     * draw ground and walls and cache them to improve performance
     * @param map generated by Controller.getMap()
     */
    init(map)
    {
        this.container = new createjs.Container();
        this.stage.addChild(this.container);
        
        const info_arr = map.Edata();
        const size_x = map.SIZE_X;
        const size_y = map.SIZE_Y;
        for (let i = 0; i < size_x; i++)
        {
            const screen_y = startPos + delta * i;
            for (let j = 0; j < size_y; j++)
            {
                const screen_x = startPos + delta * j;
                if (info_arr[i][j] === 0 || info_arr[i][j] === 2)
                    this.paintGround(screen_x, screen_y);
                else if (info_arr[i][j] === 1)
                    this.paintWall(screen_x, screen_y);
            }
        }
        this.coins = new createjs.Shape();
        this.coins.cursor = "pointer";
        this.coins.on("mousedown", (ev) => {alert("I'm a coin.");});
        this.container.addChild(this.coins);
    }

    /**
     * updates the coins on the background
     * @param map generated by Controller.getMap()
     */
    update(map)
    {
        if (this.container === null)
        {
            this.init(map);
        }

        this.coins.graphics.clear();
        const info_arr = map.Edata();
        const size_x = map.SIZE_X;
        const size_y = map.SIZE_Y;
        
        for (let i = 0; i < size_x; i++)
        {
            const screen_y = startPos + delta * i;
            for (let j = 0; j < size_y; j++)
            {
                const screen_x = startPos + delta * j;
                if (info_arr[i][j] === 2)
                    this.paintCoin(screen_x, screen_y);
            }
        }
    }

    /**
     * paint a block of ground given its upper-left point
     * @param screen_x horizonal ordinate of the upper-left point
     * @param screen_y vertical ordinate of the upper-left point
     */
    paintGround(screen_x, screen_y)
    {
        const ground = new createjs.Shape();
        //ground.graphics.beginFill("#8BC34A");
        
        const m = new createjs.Matrix2D();
        m.scale(delta / this.square.width, delta / this.square.height);
        ground.graphics.beginBitmapFill(this.square, "no-repeat", m);
        
        ground.graphics.drawRect(0, 0, delta, delta);
        ground.x = screen_x;
        ground.y = screen_y;
        ground.cache(0, 0, delta, delta);
        this.container.addChild(ground);
    }

    /**
     * paint a block of wall given its upper-left point
     * @param screen_x horizonal ordinate of the upper-left point
     * @param screen_y vertical ordinate of the upper-left point
     */
    paintWall(screen_x, screen_y)
    {
        let wall = new createjs.Shape();
        wall.cursor = "pointer";
        wall.on("mousedown", (ev) => {alert("I'm a wall.");});

        //wall.graphics.beginFill("#5D4037");

        const m = new createjs.Matrix2D();
        m.scale(delta / this.wall.width, delta / this.wall.height);
        wall.graphics.beginBitmapFill(this.wall, "no-repeat", m);
        
        wall.graphics.drawRect(0, 0, delta, delta);
        wall.x = screen_x;
        wall.y = screen_y;
        wall.cache(0, 0, delta, delta);
        this.container.addChild(wall);
    }

    /**
     * paint a coin given its center
     * @param screen_x horizonal ordinate of the center
     * @param screen_y vertical ordinate of the center
     */
    paintCoin(screen_x, screen_y)
    {
        //this.coins.graphics.beginFill("#FFC107");

        const m = new createjs.Matrix2D();
        m.translate(screen_x, screen_y);
        m.scale(delta / this.coin.width, delta / this.coin.height);
        this.coins.graphics.beginBitmapFill(this.coin, "no-repeat", m);
        
        this.coins.graphics.drawCircle(screen_x + delta / 2, screen_y + delta / 2, delta / 4);
    }
}

export default GrassPainter;
